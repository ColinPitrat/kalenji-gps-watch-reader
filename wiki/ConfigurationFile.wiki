#summary Configuration file
#labels Phase-Deploy,Configuration

=Where to place your configuration file=

You can modify the default behavior of kalenji_reader by putting a .kalenji_readerrc file in your home directory. 

For example for a user called toto, the configuration file will be:
{{{
/home/toto/.kalenjirc
}}}

=Options available=

==Output directory==
*Name:* directory

*Default value:* /tmp/kalenji_import

You can configure the directory where the imported file will be put. For example, if the user toto wants the import to be done in a subdirectory Running of his home directory, he will put the following in his configuration file:

{{{
directory=/home/toto/Running
}}} 

==Default import behavior==
*Name:* import

*Default value:* all

You can decide whether you prefer to always:
  * be prompted for sessions to import each time you run kalenji_import
{{{
import=ask
}}}
  * import all sessions available on the watch 
{{{
import=all
}}}

The later is longer if you don't want all sessions but it asks less questions so if you erase the sessions from your watch after importing them you will probably prefer it.

==Default trigger type==
*Name:* trigger

*Default value:* manual

The information of the kind of event that triggered the end of a lap is, as far as I know, not given by the watch. This setting provide the value that will always be used. It must be one of:
  * *manual*: user pressing the "end of lap" button of the watch
  * *distance*: a distance being run
  * *time*: a time being elapsed
  * *location*: a given location being reached (not possible with those watch)
  * *hr*: a given heartrate being reached (not possible with those watch)

==Filters==
*Name:* filters

*Default value:* UnreliablePoints,EmptyLaps

List of filters to apply on imported data before exporting it.
Available filters are:
  * *EmptyLaps*: Remove laps with null distance or null duration
  * *UnreliablePoints*: Remove points for which the device gives a low reliability
  * *NullHeartrate*: Replace null heartrate measures by previous non-null value
  * *FixElevation*: Uses Google Elevation API to correct the elevation of points based on geographical information. Note that there is a limitation of 25 000 points per day, which corresponds to nearly 7 hours with the best "resolution" (one point per second) 
  * *ComputeSessionStats*: Calculate duration, distance, average speed, max speed, ascent and descent using the raw information from points of the session.
  * *ReducePoints*: Remove some points so that the route contains less than 200 points after the operation. This is useful before exporting a route to the watch. This keeps points considered as important (with comment in a GPX file) and remove points where they are not far from being aligned (the notion of "not far" adapting dynamically to reach the 200 limit).

==Outputs==
*Name:* outputs
*Default value:* GPX,GoogleMap

List of formats to which data should be exported.
Outputs can be:
  * *GPX*: GPX format, an XML file conforming to GPX and GPXDATA standards
  * *GoogleMap*: an HTML page containing necessary code to display the route on a google map
  * *GoogleStaticMap*: a file containing an URL using Google API to produce a static picture of the route. As the API limit URL size, it is a simplified version for long routes
  * *KML*: a KML file readable, among others, by GoogleEarth

==Log transactions==
*Name:* log_transactions

*Default value:* yes

If set to yes, the raw information read from the watch is logged in hexadecimal in log files. The purpose is to allow reimporting the data later even if it has been removed from the watch. It can also be usefull for debugging purpose.

By default, the log files are created in a subdirectory logs of the output directory but this can be configured with configuration variable described next.

==Log transactions directory==
*Name:* log_transactions_directory

*Default value:* logs subdirectory in output directory

The directory where raw data from the watch is logged if this functionality is activated.